#!/bin/bash
### BEGIN INIT INFO
# Provides:          yamcs-server
# Required-Start:    $network $remote_fs
# Required-Stop:     $local_fs $remote_fs
# Default-Start:     3 5
# Default-Stop:      0 1 2 6
# Description:       Yamcs Mission Control
### END INIT INFO
#
YAMCS_USER=yamcs
YAMCS_HOME=/opt/yamcs
YAMCS_BIN=$YAMCS_HOME/bin/yamcsd
PID_FILE=/var/run/yamcs-server.pid
OUTERR=$YAMCS_HOME/log/yamcs-server.out # standard out and err go here


test -x $YAMCS_BIN || { echo "$YAMCS_BIN not installed";
        if [ "$1" = "stop" ]; then exit 0;
        else exit 5; fi; }

function is_running {
    pid=$1
    return $((1-`ps ww -p $pid -o args= | grep -c "yamcsd\|java.*yamcs.YamcsServer"`))
}

WAIT_FOR_START=120

case "$1" in
    start)
        if [ -d /run/systemd/system ]; then
            echo "[WARN] Prefer to manage Yamcs as a systemd unit. Example:"
            echo "[WARN]   - use \"systemctl start yamcs\" instead of \"service yamcs-server start\""
            echo "[WARN]   - use \"systemctl enable yamcs\" instead of \"chkconfig yamcs-server on\""
        fi

        echo -n "Starting Yamcs...   "
        #set a high open file limit to avoid problems with rocksdb opening too many files
        ulimit -n 10000
        alreadyrunning=0
        if [ -s $PID_FILE ] ; then
            pid=`cat $PID_FILE`
            if is_running $pid ; then
                alreadyrunning=1
                echo "already running (pid=$pid)"
            else
                rm $PID_FILE
            fi
        fi

        if [ $alreadyrunning -eq 0 ] ; then
            touch $PID_FILE
            chown $YAMCS_USER $PID_FILE
            for i in 4 3 2 1 0; do
               if [ -f $OUTERR.$i ] ; then mv $OUTERR.$i $OUTERR.$((i+1)) ; fi
            done
            su -s /bin/sh -c "nohup $YAMCS_BIN --no-stream-redirect >$OUTERR.0  2>&1 & echo \$! >$PID_FILE" $YAMCS_USER
            pid=`cat $PID_FILE`
            i=0
            #wait up to $WAIT_FOR_START seconds, maybe the database has to be loaded
            while [ $i -lt $WAIT_FOR_START ] ; do
                sleep 1
                if is_running $pid ; then
                    if [ $(grep -c 'Yamcs started in' $OUTERR.0) -eq 1 ]; then
                        echo done
                        break
                    fi
                    i=$((i+1))
                else
                    echo "Yamcs failed to start. See log file for details."
                    exit 1
                fi
            done
            if [ $i -eq $WAIT_FOR_START ] ; then 
                echo "Yamcs did not finish starting in under $WAIT_FOR_START seconds"
            fi
        fi

        ;;
    stop)
        echo -n "Stopping Yamcs...  "
        if [ -s $PID_FILE ] ; then
            pid=`cat $PID_FILE`
            i=0
            if is_running $pid ; then
                #first make Yamcs print a stack trace
                kill -3 $pid
                #kill entire process group
                kill -TERM -$(ps -o pgid= $pid | grep -o [0-9]*)
                while [ $i -lt 5 ] ; do
                    if is_running $pid ; then
                        kill -TERM -$(ps -o pgid= $pid | grep -o [0-9]*)
                    else
                        rm $PID_FILE
                        echo done
                        break
                    fi
                    sleep 1
                    i=$((i+1))
                done

                if [ $i -eq 5 ] ; then 
                    echo timeout
                fi
            else
                echo "not running"
            fi
        else
            echo "not running ($PID_FILE doesn't exist)"
        fi
        ;;
    restart)
        ## Stop the service and regardless of whether it was
        ## running or not, start it again.
        $0 stop
        $0 start

        # Remember status and be quiet
        ;;
    status)
        echo -n "Checking for Yamcs: "
        if [ -s $PID_FILE ] ; then
            pid=`cat $PID_FILE`
            if is_running $pid ; then 
                echo "running"
            else
                echo "not running"
            fi
        else 
            echo "not running"
        fi
        ;;
    *)
        echo "Usage: $0 {start|stop|restart|status}"
        exit 1
        ;;
esac
